package com.rong.persist.model;

import java.util.Date;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.rong.persist.dao.QqTeamDao;
import com.rong.persist.enums.QqDataTypeEnum;
import com.rong.persist.model.base.BaseQqData;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class QqData extends BaseQqData<QqData> {
	public static final QqData dao = new QqData().dao();
	public static final String TABLE = "qq_data";
	
	/**
	 * 保存数据后，对编组的统计进行更新
	 */
	@Override
	public boolean save(){
		boolean result = super.save();
		updateTeamStatis();
		return result;
	}

	private void updateTeamStatis() {
		long teamId = this.getTeamId();
		// 查询编组qq总数量
		String sql = "select count(*) qqCount from "+ TABLE +" where team_id = ?";
		Record record1 = Db.findFirst(sql, teamId);
		Long qqCountInTeam = record1.getLong("qqCount");
		// 查询编组qq活号总数量
		String sql2 = "select count(*) qqCount from "+ TABLE +" where team_id = ? and state = ?";
		Record record2 = Db.findFirst(sql2, teamId,true);
		Long aliveQqCountInTeam = record2.getLong("qqCount");
		QqTeamDao teamDao = new QqTeamDao();
		QqTeam qqTeam =teamDao.findById(teamId);
		qqTeam.setQqCount(qqCountInTeam.intValue());
		qqTeam.setQqCountLived(aliveQqCountInTeam.intValue());
		qqTeam.setUpdateTime(new Date());
		qqTeam.update();
	}
	
	/**
	 * 更新数据后，对编组的统计进行更新
	 */
	@Override
	public boolean update(){
		boolean result = super.update();
		updateTeamStatis();
		return result;
	}
	
	/**
	 * 删除数据后，对编组的统计进行更新
	 */
	@Override
	public boolean delete(){
		boolean result = super.delete();
		updateTeamStatis();
		return result;
	}
	
	public static QqDataTypeEnum getQqTypeByValLength(int length){
		switch (length) {
		case 2:
			return QqDataTypeEnum.WHITE;
		case 8:
			return QqDataTypeEnum.THREE_QUESTION;
		case 9:
			return QqDataTypeEnum.MOBILE;
		case 10:
			return QqDataTypeEnum.TOKEN;
		default:
			break;
		}
		return null;
	}
}
